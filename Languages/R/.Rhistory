# Criando uma classe "UserInfo"
# @param user Nome do usuario
# @param password Senha do usuario
UserInfo.new = function(user, password) {
crypt = strsplit(password, "")[[1]]
crypt = rev(crypt)
crypt = sprintf("HASH%s000", paste(crypt, collapse = "") )
res = list()
res$user = user
res$password = crypt
class(res) = c("list", "UserInfo")
return(res)
}
UserInfo.new("A","BB")
# Definindo tamanho como 1.000.000 (um milhão)
size = 1000000
array_user = sprintf("user%s", index)
# Definindo tamanho como 1.000.000 (um milhão)
size = 1:1000000
array_user = sprintf("user%s", size)
array_password = sprintf("password%s", size)
list = lapply(size, function(index, array_user, array_password){
return(UserInfo.new(array_user[index], array_password[index]))
}, array_user, array_password)
res = matrix(NA, ncol = 2, nrow = 1)
index = 1
# Criando uma classe "UserInfo"
# @param user Nome do usuario
# @param password Senha do usuario
UserInfo.new = function(user, password) {
crypt = strsplit(password, "")[[1]]
crypt = rev(crypt)
crypt = sprintf("HASH%s000", paste(crypt, collapse = "") )
res = matrix(NA, ncol = 2, nrow = 1)
res[1] = user
res[2] = crypt
class(res) = c("matrix", "UserInfo")
return(res)
}
UserInfo.new(array_user[index], array_password[index])
# Criando uma classe "UserInfo"
# @param user Nome do usuario
# @param password Senha do usuario
UserInfo.new = function(user, password) {
crypt = strsplit(password, "")[[1]]
crypt = rev(crypt)
crypt = sprintf("HASH%s000", paste(crypt, collapse = "") )
res = matrix(NA, ncol = 2, nrow = 1)
res[1] = user
res[2] = crypt
colnames(res) = c("user", "password")
class(res) = c("matrix", "UserInfo")
return(res)
}
# Definindo tamanho como 1.000.000 (um milhão)
size = 1:100000
array_user = sprintf("user%s", size)
array_password = sprintf("password%s", size)
list = sapply(size, function(index, array_user, array_password){
return(UserInfo.new(array_user[index], array_password[index]))
}, array_user, array_password)
View(list)
# Definindo tamanho como 1.000.000 (um milhão)
size = 100000
list = sapply(1:size, function(index){
user = sprintf("user%s", index)
password = sprintf("password%s", index)
return(UserInfo.new(user, password))
})
commandArgs(trailingOnly = TRUE)
quit(status = -1)
start = function(args) {
size = convertArgs(args)
inicio = proc.time()
list = sapply(1:size, function(index){
user = sprintf("user%s", index)
password = sprintf("password%s", index)
return(UserInfo.new(user, password))
})
time = proc.time() - inicio
cat(sprintf("[OK]Tamanho: %s\n", tamanho))
cat(sprintf("[OK]Tempo: %s ms", time))
}
convertArgs = function(args) {
if(length(args) != 1) {
cat("Parametros inválidos.")
quit(status = -1, save = "no")
}
line = numeric(args[1])
if(line <= 0) {
cat("Quantidade de linhas menor que 1.")
quit(status = -1, save = "no")
}
return(line)
}
# Importando bibliotecas
require(compiler)
# Compilando arquivos .R em binários .Rc
cmpfile("./src/functions.R","./bin/functions.Rc")
cmpfile("./src/model/UserInfo.R","./bin/UserInfo.Rc")
# Lendo binários .Rc
loadcmp("./bin/functions.Rc")
loadcmp("./bin/UserInfo.Rc")
args = c("0")
args[1]
numeric(args[1])
as.numeric(args[1])
proc.time()
inicio = proc.time()
time = proc.time() - inicio
time
