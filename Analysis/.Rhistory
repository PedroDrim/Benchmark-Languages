cbind(res, i_array)
start_data
dim(start_data)
start_data
length(start_data)
i = 1
start_data[[i]]
i_array = start_data[[i]]
i_array = i_array[[1]]
label = unique(i_array[,1])
label = gsub(ot, "", label)
i_array = i_array[,-1]
names(i_array) = label
size = length(start_data)
lang_result
length(lang_result)
m_res = matrix(NA, ncol = size, nrow = length(lang_result))
i
m_res[i,]
m_res[,i]
i_array[,-1]
i_array = start_data[[i]]
i_array = i_array[[1]]
label = unique(i_array[,1])
label = gsub(ot, "", label)
i_array
i_array[,-1]
m_res[,i] = i_array[,-1]
names(m_res)
colnames(m_res)
View(m_res)
colnames(m_res)[1] = label
label_array = c()
label_array = c(label_array, label)
i = 2
size
i_array = start_data[[i]]
i_array = i_array[[1]]
label = unique(i_array[,1])
label = gsub(ot, "", label)
m_res[,i] = i_array[,-1]
label_array = c(label_array, label)
colnames(m_res)
colnames(m_res) = label_array
View(m_res)
# Importando bibioteca para paralelização de tarefas
require(parallel)
# Função para executar os experimentos
readData = function(langDirectory, outputTag = "\\[OK\\]", shellFile = "Bench.sh", times = 10, paramArray = "1000") {
if(times <= 0) times = 1
lapply_res = lapply(paramArray, function(param, ot) {
#====================================================
# Run and get the output
r = list()
for(t in 1:times) {
cmd = sprintf("cd %s && sh %s %s", langDirectory, shellFile, param)
out = system(cmd, intern = T)
index = grep(ot, out)
r[[t]] = out[index]
}
#====================================================
#====================================================
# Clean and return the output
lang_result = as.data.frame(r)
names(lang_result) = NULL
start_data = apply(lang_result, 1, function(f_line) {
treat = strsplit(f_line, split = ":")
treat_matrix = do.call(rbind, treat)
return(list(treat_matrix))
})
size = length(start_data)
m_res = matrix(NA, ncol = size, nrow = length(lang_result))
label_array = c()
for(i in 1:size )  {
i_array = start_data[[i]]
i_array = i_array[[1]]
label = unique(i_array[,1])
label = gsub(ot, "", label)
m_res[,i] = i_array[,-1]
label_array = c(label_array, label)
}
colnames(m_res) = label_array
return(m_res)
#====================================================
}, outputTag)
browser()
lang = strsplit(langDirectory, split = "/")[[1]]
lang = lang[length(lang)]
result = do.call(rbind, lapply_res)
result = cbind(lang, result)
return(result)
}
result_matrix = lapply( benchDirs, readData, paramArray = array_size, times = 3, outputTag = "\\[OK\\]")
lapply_res
lang = strsplit(langDirectory, split = "/")[[1]]
lang = lang[length(lang)]
do.call(cbind, lapply_res)
do.call(rbind, lapply_res)
result = do.call(rbind, lapply_res)
result = cbind(lang, result)
result
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/Reader.R", "bin/Reader.Rc")
# Lendo arquivos compilados
loadcmp("bin/Reader.Rc")
#===============================
# Inicio dos experimentos
result = list()
array_size = sprintf("%s0000", 1:2)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, times = 3, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
# Fim dos experimentos
#===============================
View(result_matrix)
timeScale = "ms"
result = data.frame(result)
result = result_matrix
result = data.frame(result)
result$Tamanho
tamanho_array = as.character(result$Tamanho)
tamanho_array = gsub("\"", "", tamanho_array)
tempo_array = as.character(result$Tempo)
tempo_array = gsub(timeScale, "", result$Tempo)
tempo_array = gsub("\"", "", tempo_array)
result$Tempo = as.numeric(tempo_array)
result$lang = as.character(result$lang)
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
# Importando bibioteca para paralelização de tarefas
require(plyr)
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
View(a)
result = a
ggplot(result, aes(x=Tamanho, y=Tempo, fill=lang))
# Importando bibioteca para construção de gráficos
require(ggplot2)
ggplot(result, aes(x=Tamanho, y=Tempo, fill=lang))
ggplot(result, aes(x=Tamanho, y=mean, fill=lang))
a$Tamanho = as.numeric(a$Tamanho)
a
a$Tamanho = as.character(a$Tamanho)
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
a$Tamanho = as.character(a$Tamanho)
result = result_matrix
result = data.frame(result)
tamanho_array = as.character(result$Tamanho)
tamanho_array = gsub("\"", "", tamanho_array)
tempo_array = as.character(result$Tempo)
tempo_array = gsub(timeScale, "", result$Tempo)
tempo_array = gsub("\"", "", tempo_array)
result$Tempo = as.numeric(tempo_array)
result$lang = as.character(result$lang)
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
a$Tamanho = as.character(a$Tamanho)
a$Tamanho = as.numeric(a$Tamanho)
a
result = result_matrix
result = data.frame(result)
tamanho_array = as.character(result$Tamanho)
tamanho_array = gsub("\"", "", tamanho_array)
tempo_array = as.character(result$Tempo)
tempo_array = gsub(timeScale, "", result$Tempo)
tempo_array = gsub("\"", "", tempo_array)
result$Tempo = as.numeric(tempo_array)
result$lang = as.character(result$lang)
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
a$Tamanho
result$Tamanho = tamanho_array
tempo_array = as.character(result$Tempo)
tempo_array = gsub(timeScale, "", result$Tempo)
tempo_array = gsub("\"", "", tempo_array)
result$Tempo = as.numeric(tempo_array)
result$lang = as.character(result$lang)
result
a = ddply(result, c("lang", "Tamanho"), summarise,
mean = round(mean(Tempo), 2),
sd = round(sd(Tempo), 2))
a
a$Tamanho = as.character(a$Tamanho)
a$Tamanho = as.numeric(a$Tamanho)
result = a
ggplot(result, aes(x=Tamanho, y=mean, fill=lang))
str(result)
ggplot(result, aes(x=Tamanho, y=mean, fill=lang)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +      # Thinner lines
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9))
ggplot(result, aes(x=Tamanho, y=mean, colour=lang, group=lang)) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white")
pd <- position_dodge(0.1) # move them .05 to the left and right
ggplot(result, aes(x=Tamanho, y=mean, colour=lang, group=lang)) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white")
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
# Lendo arquivos compilados
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
#===============================
# Inicio dos experimentos
result = list()
array_size = sprintf("%s00000", 1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Fim dos experimentos
#===============================
View(analysed_df)
result = analysed_df
pd <- position_dodge(0.1) # move them .05 to the left and right
ggplot(result, aes(x=Tamanho, y=mean, colour=lang, group=lang)) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white")
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = sprintf("%s00000", 1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Fim dos experimentos
#===============================
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
array_size = createExperiment(1:9)
#====================================================
# Funcao para gerar parametros dos experimentos
createExperiment = function(array_size) {
x = sprintf("%s00", array_size) # 000
return(x)
}
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
benchDirs = list.files(directory, full.names = T)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
benchDirs
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
analysed_df
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
analysed_df
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Fim dos experimentos
#===============================
array_size = createExperiment(1:9)
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
cl
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
View(analysed_df)
requre(parallel)
require(parallel)
?parallel
?`parallel-package`
# Importando biblioteca para compilação
require(compiler)
require(parallel)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
cl = makeCluster(getOption("cl.cores", length(benchDirs)) )
result_matrix = parLapply(cl, benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
stopCluster(cl)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Fim dos experimentos
#===============================
# Importando biblioteca para compilação
require(compiler)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
result_matrix = lapply(benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Fim dos experimentos
#===============================
# Importando biblioteca para compilação
require(compiler)
# Compilando arquivos
cmpfile("src/ExperimentCreator.R", "bin/ExperimentCreator.Rc")
cmpfile("src/Reader.R", "bin/Reader.Rc")
cmpfile("src/Analyser.R", "bin/Analyser.Rc")
cmpfile("src/Plotter.R", "bin/Plotter.Rc")
# Lendo arquivos compilados
loadcmp("bin/ExperimentCreator.Rc")
loadcmp("bin/Reader.Rc")
loadcmp("bin/Analyser.Rc")
loadcmp("bin/Plotter.Rc")
#===============================
# Inicio dos experimentos
array_size = createExperiment(1:9)
directory = "/home/pedro/MEGA/MEGAsync/Repositorio_Git/Benchmark-branches/simpleClass/Benchmark-Languages/Languages"
benchDirs = list.files(directory, full.names = T)
# Realizando Benchmark
result_matrix = lapply(benchDirs, readData, paramArray = array_size, outputTag = "\\[OK\\]")
result_matrix = do.call(rbind, result_matrix)
# Analisando dados
analysed_df = analyseData(result_matrix)
# Gerando gráfico das análises
plotData(analysed_df, name_prefix = "Plot_SimpleClass")
# Fim dos experimentos
#===============================
